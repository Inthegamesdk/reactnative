// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-tvos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PusherSwift
import CryptoKit
import Foundation
import Network
@_exported import PusherSwift
import Swift
import _Concurrency
@objcMembers @objc open class PusherConnection : ObjectiveC.NSObject {
  @objc final public let url: Swift.String
  @objc final public let key: Swift.String
  @objc open var options: PusherSwift.PusherClientOptions
  @objc open var globalChannel: PusherSwift.GlobalChannel!
  @objc open var socketId: Swift.String?
  @objc open var connectionState: PusherSwift.ConnectionState
  @objc open var channels: PusherSwift.PusherChannels
  open var socket: PusherSwift.NWWebSocket!
  @objc open var URLSession: Foundation.URLSession
  @objc open var userDataFetcher: (() -> PusherSwift.PusherPresenceChannelMember)?
  open var reconnectAttemptsMax: Swift.Int?
  @objc open var reconnectAttempts: Swift.Int
  open var maxReconnectGapInSeconds: Swift.Double?
  @objc weak open var delegate: PusherSwift.PusherDelegate? {
    @objc get
    @objc set
  }
  @objc open var pongResponseTimeoutInterval: Swift.Double
  @objc open var activityTimeoutInterval: Foundation.TimeInterval
  public init(key: Swift.String, socket: PusherSwift.NWWebSocket, url: Swift.String, options: PusherSwift.PusherClientOptions, URLSession: Foundation.URLSession = Foundation.URLSession.shared)
  @objc deinit
  @objc open func sendEvent(event: Swift.String, data: Any, channel: PusherSwift.PusherChannel? = nil)
  @objc open func disconnect()
  @objc open func connect()
  @objc open func handleError(error: PusherSwift.PusherError)
  @objc open func handleEvent(event: PusherSwift.PusherEvent)
}
public enum PusherChannelType {
  case `private`
  case presence
  case normal
  public init(name: Swift.String)
  public static func type(forName name: Swift.String) -> PusherSwift.PusherChannelType
  public static func isPresenceChannel(name: Swift.String) -> Swift.Bool
  public static func == (a: PusherSwift.PusherChannelType, b: PusherSwift.PusherChannelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EventHandler {
}
@objc extension PusherSwift.PusherClientOptions {
  @objc convenience dynamic public init(ocAuthMethod authMethod: PusherSwift.OCAuthMethod, autoReconnect: Swift.Bool = true, ocHost host: PusherSwift.OCPusherHost = PusherHost.defaultHost.toObjc(), port: Foundation.NSNumber? = nil, useTLS: Swift.Bool = true, activityTimeout: Foundation.NSNumber? = nil)
  @objc convenience dynamic public init(ocAuthMethod authMethod: PusherSwift.OCAuthMethod, attemptToReturnJSONObject: Swift.Bool = true, autoReconnect: Swift.Bool = true, ocHost host: PusherSwift.OCPusherHost = PusherHost.defaultHost.toObjc(), port: Foundation.NSNumber? = nil, useTLS: Swift.Bool = true, activityTimeout: Foundation.NSNumber? = nil)
  @objc convenience dynamic public init(authMethod: PusherSwift.OCAuthMethod)
  @objc dynamic public func setAuthMethod(authMethod: PusherSwift.OCAuthMethod)
}
@objc extension PusherSwift.Pusher {
  @objc dynamic public func subscribe(channelName: Swift.String) -> PusherSwift.PusherChannel
  @objc dynamic public func subscribe(channelName: Swift.String, onMemberAdded: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil, onMemberRemoved: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil) -> PusherSwift.PusherChannel
  @objc dynamic public func subscribeToPresenceChannel(channelName: Swift.String) -> PusherSwift.PusherPresenceChannel
  @objc dynamic public func subscribeToPresenceChannel(channelName: Swift.String, onMemberAdded: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil, onMemberRemoved: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil) -> PusherSwift.PusherPresenceChannel
  @objc convenience dynamic public init(withAppKey key: Swift.String, options: PusherSwift.PusherClientOptions)
  @objc convenience dynamic public init(withKey key: Swift.String)
}
@objc public protocol PusherDelegate {
  @objc optional func debugLog(message: Swift.String)
  @objc optional func changedConnectionState(from old: PusherSwift.ConnectionState, to new: PusherSwift.ConnectionState)
  @objc optional func subscribedToChannel(name: Swift.String)
  @objc optional func failedToSubscribeToChannel(name: Swift.String, response: Foundation.URLResponse?, data: Swift.String?, error: Foundation.NSError?)
  @objc optional func failedToDecryptEvent(eventName: Swift.String, channelName: Swift.String, data: Swift.String?)
  @objc(receivedError:) optional func receivedError(error: PusherSwift.PusherError)
}
public enum PusherHost {
  case host(Swift.String)
  case cluster(Swift.String)
  public static var defaultHost: PusherSwift.PusherHost {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
open class NWWebSocket : PusherSwift.WebSocketConnection {
  weak public var delegate: PusherSwift.WebSocketConnectionDelegate?
  public static var defaultOptions: Network.NWProtocolWebSocket.Options {
    get
  }
  convenience public init(request: Foundation.URLRequest, connectAutomatically: Swift.Bool = false, options: Network.NWProtocolWebSocket.Options = NWWebSocket.defaultOptions, connectionQueue: Dispatch.DispatchQueue = .main)
  public init(url: Foundation.URL, connectAutomatically: Swift.Bool = false, options: Network.NWProtocolWebSocket.Options = NWWebSocket.defaultOptions, connectionQueue: Dispatch.DispatchQueue = .main)
  open func connect()
  open func send(string: Swift.String)
  open func send(data: Foundation.Data)
  public func listen()
  open func ping(interval: Foundation.TimeInterval)
  open func ping()
  open func disconnect(closeCode: Network.NWProtocolWebSocket.CloseCode = .protocolCode(.normalClosure))
  @objc deinit
}
extension PusherSwift.PusherHost {
  public func toObjc() -> PusherSwift.OCPusherHost
  public static func fromObjc(source: PusherSwift.OCPusherHost) -> PusherSwift.PusherHost
}
@objc @_hasMissingDesignatedInitializers @objcMembers open class PusherError : ObjectiveC.NSObject {
  final public let code: Swift.Int?
  @objc final public let message: Swift.String
  @objc deinit
}
public struct QueuedClientEvent {
  public let name: Swift.String
  public let data: Any
}
extension PusherSwift.AuthMethod {
  public func toObjc() -> PusherSwift.OCAuthMethod
  public static func fromObjc(source: PusherSwift.OCAuthMethod) -> PusherSwift.AuthMethod
}
extension PusherSwift.PusherConnection : PusherSwift.WebSocketConnectionDelegate {
  public func webSocketDidReceiveMessage(connection: PusherSwift.WebSocketConnection, string: Swift.String)
  public func webSocketDidReceivePong(connection: PusherSwift.WebSocketConnection)
  public func webSocketDidDisconnect(connection: PusherSwift.WebSocketConnection, closeCode: Network.NWProtocolWebSocket.CloseCode, reason: Foundation.Data?)
  public func webSocketViabilityDidChange(connection: PusherSwift.WebSocketConnection, isViable: Swift.Bool)
  public func webSocketDidAttemptBetterPathMigration(result: Swift.Result<PusherSwift.WebSocketConnection, Network.NWError>)
  public func webSocketDidConnect(connection: PusherSwift.WebSocketConnection)
  public func webSocketDidReceiveMessage(connection: PusherSwift.WebSocketConnection, data: Foundation.Data)
  public func webSocketDidReceiveError(connection: PusherSwift.WebSocketConnection, error: Network.NWError)
}
@objc public enum ConnectionState : Swift.Int {
  case connecting
  case connected
  case disconnecting
  case disconnected
  case reconnecting
  public func stringValue() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class PusherChannel : ObjectiveC.NSObject {
  open var eventHandlers: [Swift.String : [PusherSwift.EventHandler]] {
    get
    set
  }
  @objc open var subscribed: Swift.Bool
  @objc final public let name: Swift.String
  @objc weak open var connection: PusherSwift.PusherConnection?
  open var unsentEvents: [PusherSwift.QueuedClientEvent]
  final public let type: PusherSwift.PusherChannelType
  @objc public var auth: PusherSwift.PusherAuth?
  @objc public init(name: Swift.String, connection: PusherSwift.PusherConnection, auth: PusherSwift.PusherAuth? = nil)
  @objc @discardableResult
  open func bind(eventName: Swift.String, eventCallback: @escaping (PusherSwift.PusherEvent) -> Swift.Void) -> Swift.String
  @objc open func unbind(eventName: Swift.String, callbackId: Swift.String)
  @objc open func unbindAll()
  @objc open func unbindAll(forEventName eventName: Swift.String)
  @objc open func handleEvent(event: PusherSwift.PusherEvent)
  @objc open func trigger(eventName: Swift.String, data: Any)
  @objc deinit
}
@objc public protocol Authorizer {
  @objc func fetchAuthValue(socketID: Swift.String, channelName: Swift.String, completionHandler: @escaping (PusherSwift.PusherAuth?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc open class PusherChannels : ObjectiveC.NSObject {
  @objc open var channels: [Swift.String : PusherSwift.PusherChannel] {
    @objc get
    @objc set
  }
  @objc public func find(name: Swift.String) -> PusherSwift.PusherChannel?
  @objc public func findPresence(name: Swift.String) -> PusherSwift.PusherPresenceChannel?
  @objc override dynamic public init()
  @objc deinit
}
public protocol WebSocketConnection {
  func connect()
  func send(string: Swift.String)
  func send(data: Foundation.Data)
  func listen()
  func ping(interval: Foundation.TimeInterval)
  func ping()
  func disconnect(closeCode: Network.NWProtocolWebSocket.CloseCode)
  var delegate: PusherSwift.WebSocketConnectionDelegate? { get set }
}
public protocol WebSocketConnectionDelegate : AnyObject {
  func webSocketDidConnect(connection: PusherSwift.WebSocketConnection)
  func webSocketDidDisconnect(connection: PusherSwift.WebSocketConnection, closeCode: Network.NWProtocolWebSocket.CloseCode, reason: Foundation.Data?)
  func webSocketViabilityDidChange(connection: PusherSwift.WebSocketConnection, isViable: Swift.Bool)
  func webSocketDidAttemptBetterPathMigration(result: Swift.Result<PusherSwift.WebSocketConnection, Network.NWError>)
  func webSocketDidReceiveError(connection: PusherSwift.WebSocketConnection, error: Network.NWError)
  func webSocketDidReceivePong(connection: PusherSwift.WebSocketConnection)
  func webSocketDidReceiveMessage(connection: PusherSwift.WebSocketConnection, string: Swift.String)
  func webSocketDidReceiveMessage(connection: PusherSwift.WebSocketConnection, data: Foundation.Data)
}
@_hasMissingDesignatedInitializers @objcMembers @objc open class GlobalChannel : PusherSwift.PusherChannel {
  open var globalCallbacks: [Swift.String : (PusherSwift.PusherEvent) -> Swift.Void]
  @objc override open func unbindAll()
  @objc deinit
}
@objc public class PusherAuth : ObjectiveC.NSObject {
  final public let auth: Swift.String
  final public let channelData: Swift.String?
  final public let sharedSecret: Swift.String?
  public init(auth: Swift.String, channelData: Swift.String? = nil, sharedSecret: Swift.String? = nil)
  @objc deinit
}
@objcMembers @objc public class OCAuthMethod : ObjectiveC.NSObject {
  @objc public init(type: Swift.Int)
  @objc public init(authEndpoint: Swift.String)
  @objc public init(authRequestBuilder: PusherSwift.AuthRequestBuilderProtocol)
  @objc public init(secret: Swift.String)
  @objc public init(authorizer: PusherSwift.Authorizer)
  @objc deinit
}
@objcMembers @objc public class PusherClientOptions : ObjectiveC.NSObject {
  public var authMethod: PusherSwift.AuthMethod
  @objc final public let attemptToReturnJSONObject: Swift.Bool
  @objc final public let autoReconnect: Swift.Bool
  @objc final public let host: Swift.String
  @objc final public let port: Swift.Int
  @objc final public let path: Swift.String?
  @objc final public let useTLS: Swift.Bool
  final public let activityTimeout: Foundation.TimeInterval?
  @nonobjc public init(authMethod: PusherSwift.AuthMethod = .noMethod, attemptToReturnJSONObject: Swift.Bool = true, autoReconnect: Swift.Bool = true, host: PusherSwift.PusherHost = .defaultHost, port: Swift.Int? = nil, path: Swift.String? = nil, useTLS: Swift.Bool = true, activityTimeout: Foundation.TimeInterval? = nil)
  @objc deinit
}
public struct NaclUtil {
  public enum NaclUtilError : Swift.Error {
    case badKeySize
    case badNonceSize
    case badPublicKeySize
    case badSecretKeySize
    case internalError
    public static func == (a: PusherSwift.NaclUtil.NaclUtilError, b: PusherSwift.NaclUtil.NaclUtilError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func secureRandomData(count: Swift.Int) throws -> Foundation.Data
  public static func hash(message: Foundation.Data) throws -> Foundation.Data
  public static func verify(x: Foundation.Data, y: Foundation.Data) throws -> Swift.Bool
}
public struct NaclSecretBox {
  public enum NaclSecretBoxError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: PusherSwift.NaclSecretBox.NaclSecretBoxError, b: PusherSwift.NaclSecretBox.NaclSecretBoxError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func secretBox(message: Foundation.Data, nonce: Foundation.Data, key: Foundation.Data) throws -> Foundation.Data
  public static func open(box: Foundation.Data, nonce: Foundation.Data, key: Foundation.Data) throws -> Foundation.Data
}
public struct NaclScalarMult {
  public enum NaclScalarMultError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: PusherSwift.NaclScalarMult.NaclScalarMultError, b: PusherSwift.NaclScalarMult.NaclScalarMultError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func scalarMult(n: Foundation.Data, p: Foundation.Data) throws -> Foundation.Data
  public static func base(n: Foundation.Data) throws -> Foundation.Data
}
public struct NaclBox {
  public enum NaclBoxError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: PusherSwift.NaclBox.NaclBoxError, b: PusherSwift.NaclBox.NaclBoxError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func box(message: Foundation.Data, nonce: Foundation.Data, publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func before(publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func open(message: Foundation.Data, nonce: Foundation.Data, publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func keyPair() throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
  public static func keyPair(fromSecretKey sk: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
}
public struct NaclSign {
  public enum NaclSignError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: PusherSwift.NaclSign.NaclSignError, b: PusherSwift.NaclSign.NaclSignError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func sign(message: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func signOpen(signedMessage: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
  public static func signDetached(message: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func signDetachedVerify(message: Foundation.Data, sig: Foundation.Data, publicKey: Foundation.Data) throws -> Swift.Bool
  public struct KeyPair {
    public static func keyPair() throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
    public static func keyPair(fromSecretKey secretKey: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
    public static func keyPair(fromSeed seed: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers open class PusherEvent : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public let eventName: Swift.String
  @objc final public let channelName: Swift.String?
  @objc final public let data: Swift.String?
  @objc final public let userId: Swift.String?
  @objc public func property(withKey key: Swift.String) -> Any?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc extension PusherSwift.PusherConnection {
  @objc dynamic public var OCReconnectAttemptsMax: Foundation.NSNumber? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var OCMaxReconnectGapInSeconds: Foundation.NSNumber? {
    @objc get
    @objc set(newValue)
  }
}
@objcMembers @objc public class PusherPresenceChannelMember : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let userInfo: Any?
  @objc public init(userId: Swift.String, userInfo: Any? = nil)
  @objc deinit
}
extension PusherSwift.PusherError {
  @objc dynamic public var codeOC: Foundation.NSNumber? {
    @objc get
  }
}
public typealias PusherUserInfoObject = [Swift.String : Swift.AnyObject]
@_hasMissingDesignatedInitializers @objcMembers @objc open class PusherPresenceChannel : PusherSwift.PusherChannel {
  @objc open var members: [PusherSwift.PusherPresenceChannelMember]
  @objc open var onMemberAdded: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)?
  @objc open var onMemberRemoved: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)?
  @objc open var myId: Swift.String?
  @objc open func findMember(userId: Swift.String) -> PusherSwift.PusherPresenceChannelMember?
  @objc open func me() -> PusherSwift.PusherPresenceChannelMember?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class OCPusherHost : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(host: Swift.String)
  @objc public init(cluster: Swift.String)
  @objc deinit
}
@objc public protocol AuthRequestBuilderProtocol {
  @objc optional func requestFor(socketID: Swift.String, channelName: Swift.String) -> Foundation.URLRequest?
}
public enum AuthMethod {
  case endpoint(authEndpoint: Swift.String)
  case authRequestBuilder(authRequestBuilder: PusherSwift.AuthRequestBuilderProtocol)
  case authorizer(authorizer: PusherSwift.Authorizer)
  case inline(secret: Swift.String)
  case noMethod
}
@objcMembers @objc open class Pusher : ObjectiveC.NSObject {
  @objc final public let connection: PusherSwift.PusherConnection
  @objc weak open var delegate: PusherSwift.PusherDelegate? {
    @objc get
    @objc set
  }
  @objc public init(key: Swift.String, options: PusherSwift.PusherClientOptions = PusherClientOptions())
  @objc open func subscribe(_ channelName: Swift.String, auth: PusherSwift.PusherAuth? = nil, onMemberAdded: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil, onMemberRemoved: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil) -> PusherSwift.PusherChannel
  @objc open func subscribeToPresenceChannel(channelName: Swift.String, auth: PusherSwift.PusherAuth? = nil, onMemberAdded: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil, onMemberRemoved: ((PusherSwift.PusherPresenceChannelMember) -> Swift.Void)? = nil) -> PusherSwift.PusherPresenceChannel
  @objc open func unsubscribe(_ channelName: Swift.String)
  @objc open func unsubscribeAll()
  @objc @discardableResult
  open func bind(eventCallback: @escaping (PusherSwift.PusherEvent) -> Swift.Void) -> Swift.String
  @objc open func unbind(callbackId: Swift.String)
  @objc open func unbindAll()
  @objc open func disconnect()
  @objc open func connect()
  @objc deinit
}
extension PusherSwift.PusherChannelType : Swift.Equatable {}
extension PusherSwift.PusherChannelType : Swift.Hashable {}
extension PusherSwift.ConnectionState : Swift.Equatable {}
extension PusherSwift.ConnectionState : Swift.Hashable {}
extension PusherSwift.ConnectionState : Swift.RawRepresentable {}
extension PusherSwift.NaclUtil.NaclUtilError : Swift.Equatable {}
extension PusherSwift.NaclUtil.NaclUtilError : Swift.Hashable {}
extension PusherSwift.NaclSecretBox.NaclSecretBoxError : Swift.Equatable {}
extension PusherSwift.NaclSecretBox.NaclSecretBoxError : Swift.Hashable {}
extension PusherSwift.NaclScalarMult.NaclScalarMultError : Swift.Equatable {}
extension PusherSwift.NaclScalarMult.NaclScalarMultError : Swift.Hashable {}
extension PusherSwift.NaclBox.NaclBoxError : Swift.Equatable {}
extension PusherSwift.NaclBox.NaclBoxError : Swift.Hashable {}
extension PusherSwift.NaclSign.NaclSignError : Swift.Equatable {}
extension PusherSwift.NaclSign.NaclSignError : Swift.Hashable {}
